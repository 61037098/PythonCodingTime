2.6 如何创建线程池
==================

--------------

   **友情提醒**\ ：
   本系列所有的代码均在Python3下编写。Python2中可能有所差异。

2.6.1 使用第三方模块
--------------------

在使用多线程处理任务时也不是线程越多越好，由于在切换线程的时候，需要切换上下文环境，依然会造成cpu的大量开销。为解决这个问题，线程池的概念被提出来了。预先创建好一个较为优化的数量的线程，让过来的任务立刻能够使用，就形成了线程池。

在Python3中，创建线程池是通过\ ``concurrent.futures``\ 函数库中的\ ``ThreadPoolExecutor``\ 类来实现的。

.. code:: python

   import time
   import threading
   from concurrent.futures import ThreadPoolExecutor


   def target():
       for i in range(5):
           print('running thread-{}:{}'.format(threading.get_ident(), i))
           time.sleep(1)
           
   #: 生成线程池最大线程为5个
   pool = ThreadPoolExecutor(5) 

   for i in range(100):
       pool.submit(target) # 往线程中提交，并运行 

从结果来看，前面设置线程池最大线程数5个，有生效。

.. code:: python

   running thread-11308:0
   running thread-12504:0
   running thread-5656:0
   running thread-12640:0
   running thread-7948:0

   running thread-11308:1
   running thread-5656:1
   running thread-7948:1
   running thread-12640:1
   running thread-12504:1

   ...
   ...

2.6.2 自定义线程池
------------------

除了使用上述第三方模块的方法之外，我们还可以自己结合前面所学的消息队列来自定义线程池。

这里我们就使用queue来实现一个上面同样效果的例子，大家感受一下。

.. code:: python

   import time
   import threading
   from queue import Queue

   def target(q):
       while True:
           msg = q.get()
           for i in range(5):
               print('running thread-{}:{}'.format(threading.get_ident(), i))
               time.sleep(1)

   def pool(workers,queue):
       for n in range(workers):
           t = threading.Thread(target=target, args=(queue,))
           t.daemon = True
           t.start()

   queue = Queue()
   # 创建一个线程池：并设置线程数为5
   pool(5, queue)

   for i in range(100):
       queue.put("start")

   # 消息都被消费才能结束
   queue.join()

输出是和上面是完全一样的效果

.. code:: python

   running thread-11308:0
   running thread-12504:0
   running thread-5656:0
   running thread-12640:0
   running thread-7948:0

   running thread-11308:1
   running thread-5656:1
   running thread-7948:1
   running thread-12640:1
   running thread-12504:1

   ...
   ...

构建线程池的方法，是可以很灵活的，大家有举可以自己多研究。但是建议只要掌握一种自己熟悉的，能快速上手的就好了。

--------------

.. figure:: http://image.python-online.cn/20191117155836.png
   :alt: 关注公众号，获取最新干货！

   关注公众号，获取最新干货！
