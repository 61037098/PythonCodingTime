7.5 Docker：网络通信
====================

--------------

一、三种基础网络
----------------

在docker安装的时候会自动创建三种网络可供使用。

.. code:: shell

   $ docker network ls

   【none】 ：没有网络，与外界完全隔离。这个只能用在容器业务不需要联网，不需要集群，而只在本机运行业务时使用。目的就是隔绝网络。

   --> 指定： $ docker run -it --network=none busybox
      
   【host】 ：使用 host 网络，容器的网络配置和 host 完全一样。连 hostname 也是一样。最大的好处就是性能，如果容器对网络传输效率有较高要求，则可以选择 host 网络。当然不便之处就是牺牲一些灵活性，比如要考虑端口冲突问题，Docker host 上已经使用的端口就不能再用了。

   --> 指定： $ docker run -it --network=host busybox

   【bridge】： docker安装的时候默认会创建一个 “docker0” 的linux bridge，若不指定网络，就会都挂在这个网桥下。若宿主机可上网，用这个网络创建的容器也可以上网。

   --> 1. 无需指定，就使用这个网络
       2. $ docker run -it --network=bridge busybox

查看网桥的信息，，可以看到有哪些容器挂在这个网桥下面

::

   $ docker network inspect bridge

说明一下，host 网络： 直接使用 Docker host
的网络最大的好处就是性能，如果容器对网络传输效率有较高要求，则可以选择
host
网络。当然不便之处就是牺牲一些灵活性，比如要考虑端口冲突问题，Docker
host 上已经使用的端口就不能再用了。

二、自定义网络
--------------

2.1 跨主机网络
~~~~~~~~~~~~~~

上面几种网络都是自带的，同时我们也可以自定义网络（通常是网桥）。

::

   # 指定driver=bridge 
   $ docker network create --driver bridge my_net1  
   # 这种无法指定ip，subnet创建的网络才能指定，会报如下错误

   docker: Error response from daemon: user specified IP address is supported only when connecting to networks with user configured subnets.

   # 如果不指定网络段，会自己生成 172.x.0.1/16 ，x 从17开始，每创建一个递增。
   # 就是第一次创建是，172.17.0.1/16
   # 第二次创建是，172.18.0.1/16


   $ docker network create --driver bridge --subnet 192.168.7.0/24 --gatewat 192.168.7.1 my_net2
   $ 

1. 同一网络（网桥）下的容器，可以通信
2. 不同网络（网桥）下的容器，docker
   默认不允许通信（当然可以通过路由转发来实现），可以用命令将容器挂到另一网桥上

命令：docker network connect my_net2

上面不管是 ``none`` , ``host``, ``bridge`` 都是 ``local``
类型的网络，仅能在本机上进行通信。

而如果如实现集群通信，基础网络是不能满足要求的。这就需要我们自定义网络。这些网络也同样也是有三种（主要是根据
``driver`` 不同）:

2.2 bridge
~~~~~~~~~~

::

   # 只要指定driver为bridge 就可以创建一个网桥
   # driver 有三种，一种是bridge、overlay、macvlan

   # 创建网络：bridge

   $ docker network create --driver bridge my_net
   $ docker network create --driver bridge --subnet 192.168.7.0/24 --gatewat 192.168.7.1 my_net2

   # 该网络没有指定子网，使用的是dhcp分配ip
   $ docker run -it --network my_net <image>   

   # 该网络创建时有指定子网，所以可以指定ip创建
   $ docker run -it --network my_net2 --ip 192.168.7.10 <image>

2.3 overlay
~~~~~~~~~~~

为支持容器跨主机通信，Docker 提供了 overlay driver，使用户可以创建基于
VxLAN 的 overlay 网络。

Docerk overlay 网络需要一个 key-value 数据库用于保存网络状态信息，包括
Network、Endpoint、IP 等。Consul、Etcd 和 ZooKeeper 都是 Docker 支持的
key-vlaue 软件，我们这里使用 Consul。

   注：Consul 模式，不能与 swarm 模式共存，只能选取一个。

先确保，当前集群没有处在swarm模式下，如果有要先清除。

::

   # worker 节点
   $ docker swarm leave

   # manager 节点
   $ docker swarm leave --force

   # 如果 docker node ls 还有节点存在，就删除
   $ docker node rm [node_name]

然后在管理节点上创建 ``consul``
存放网络数据，这样在一台上创建的网络都能同步到其他机器上。

::

   # 在 docker 管理机器上运行
   $ docker run -d -p 8500:8500 -h consul --name consul progrium/consul -server -bootstrap

然后到其他两台节点上，修改配置，路径为：\ ``/etc/systemd/system/docker.service.d/10-machine.conf``

::

   # 这里的 eth1 是可以和 192.168.2.55 通信的网卡
   --cluster-store=consul://192.168.2.55:8500 --cluster-advertise=eth1:2376

|image0|

然后重启

::

   systemctl daemon-reload               # 刷新配置，不然修改的配置不会生效
   systemctl restart docker.service

在浏览器上输入地址 |image1|

至此，\ ``Consul`` 安装成功。

然后就可以创建 ``overlay`` 网络了，这个网络，在没有配好 ``Consul``
的情况下，或者没有 ``Swarm``
的情况下是无法创建的。所以我们加入了Consul的节点上创建。

我们在 ``bm-docker-01`` 上创建

::

   docker network create --driver overlay ov_net1

然后在 ``bm-docker-02`` 上也可以看到这个网络，原因是这些数据已经经过
Consul 进行同步了。

这个时候，我们基于这个 ``overlay`` 网络分别在两台节点上创建容器。

::

   # bm-docker-01
   docker run -itd --name bbox1 --network ov_net1 busybox

   # bm-docker-02
   docker run -itd --name bbox2 --network ov_net1 busybox

试着ping一下在两台 host 上的网络是否可通 |image2|

查看一下ip网卡信息。

::

   docker exec bbox2 ip r

|image3|

会发现使用 ``overlay`` 网络会有两张网卡。这是为什么呢？

原来 ``docker`` 会为每个 ``overlay`` 网络创建一个独立的
``network namespace``\ ，其中会有一个
``linux bridge br0``\ ，\ ``endpoint`` 还是由 ``veth pair``
实现，一端连接到容器中（即 ``eth0``\ ），另一端连接到 ``namespace`` 的
br0 上。

``br0`` 除了连接所有的 ``endpoint``\ ，还会连接一个 ``vxlan``
设备，用于与其他 ``host`` 建立
``vxlan tunnel``\ 。容器之间的数据就是通过这个 ``tunnel`` 通信的。

三、容器之间通信
----------------

::

   1. 同一网络（网桥）下的容器，可以通信
   2. 不同网络（网桥）下的容器，docker 默认不允许通信（当然可以通过路由转发来实现），可以通过在容器挂一个和另一容器在同一网桥下的网卡
      命令：docker network connect my_net2 <container id>

   以上是通用类型，都是用ping ip来检测能否通信，或者说通过ip来通信。
   下面介绍，在我们不知道其他容器的ip时，可以通过容器名来通信，前提是这些容器都处于自定义的网络中，必须是自定义的。
   如：现有两个容器，bbox1和bbox2，都用的my_net2，在bbox1里可以通过 ping bbox2来与bbox2通信。
   但若现有bbox3，是使用bridge的网络，则无法使用这样的方式

   3. 共享网络
   两个容器是可以共享一个网络的。共享网卡和配置信息。
      命令：docker run -it --network:container:<container name> busy

四、容器与外部通信
------------------

包括 ``容器访问外部``\ 和\ ``外部访问容器``\ 。

::

   1. 容器访问外部
   是通过 NAT 网络地址转换，来使用host的ip给外部发送数据包。
   这个只要配置下iptales就可以。


   2. 外部访问容器
   容器对外暴露一个端口，这个port和host的port，要映射起来，这个是由docker proxy来做的。docker proxy会时时监控host的端口，若有请求访问这个host port就重定向给容器的port

   命令：docker run -it -p 8080:80 httpd   # 将hostr的8080映射给httpd容器的80端口

--------------

.. figure:: https://ws1.sinaimg.cn/large/8f640247gy1fyi60fxos4j20u00a8tdz.jpg
   :alt: 关注公众号，获取最新干货！


.. |image0| image:: http://image.python-online.cn/18-1-28/92519416.jpg
.. |image1| image:: http://image.python-online.cn/18-1-28/37395940.jpg
.. |image2| image:: https://i.loli.net/2018/01/28/5a6de8702428c.png
.. |image3| image:: https://i.loli.net/2018/01/28/5a6de73776390.png

