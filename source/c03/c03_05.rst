3.5 源码解读：Flask上下文与代理模式
===================================

在 Flask 中有三个非常重要的对象，你肯定不会感到陌生。

-  Local
-  LocalProxy
-  LocalStack

今天就要来理解一下这三个都是什么，他们在 Flask
中所担任的角色，以及和这三者息息相关的上下文机制。

3.5.1 Local
-----------

首先来讲一下\ ``Local``
，记得在以前的「并发编程系列」的第五篇有讲过线程的\ ``信息隔离``\ 。和这里的\ ``Local``\ 是一个作用

什么是\ ``信息隔离``\ 呢？比如说现有两个线程，线程A里的运行环境，和线程B里运行环境变量不能共享。这就是\ ``信息隔离``\ 。

在线程中，是通过\ ``threading``
模块自带的\ ``local``\ 对象来存储的。但有一个问题是这个\ ``local``\ 的隔离是线程级别的。

而在web开发中，线程级别的隔离已经不能满足要求了，因为多个请求是很有可能会跑在同一个线程中的。在web应用里中，我们需要的是请求级别的隔离。这个时候\ ``werkzeug``
的\ ``Local``\ 就派上用场了，它就是用来实现请求级别变量的隔离。一个请求会对应一个Local
对象。

Local
是请求级别的对象，当一个请求结束时，需要有更高一层的管理器对这个请求的数据做一些清理回收。这个管理器就叫做：\ ``LocalManager``\ ，除此之外，还可以通过
``local_manager.locals.append(local)`` 动态添加local对象。

下面是一个精简示例，\ ``make_middleware`` 函数是主角。

.. code:: python

   from werkzeug.local import Local, LocalManager

   local = Local()
   local_manager = LocalManager([local])

   def application(environ, start_response):
       local.request = request = Request(environ)
       ...

   # make_middleware会确保当request结束时，所有存储于local中的对象的reference被清除
   application = local_manager.make_middleware(application)

3.5.2 LocalStack
----------------

``LocalStack``
，从命名上，可以知道，他是一个栈结构的对象。它存储的主要有两种上下文，\ ``AppContext``
和 ``RequestContext``\ 。

当一个请求发起后，flask会把RequestContext推入一个LocalStack中（\ ``_request_ctx_stack``\ ），而在推入之前，其实它会去检测另一个LocalStack（\ ``_app_ctx_stack``\ ）是否为空，如果为空就先将app的上下文信息push到\ ``_app_ctx_stack``\ ，然后再去把请求的上下文信息push到\ ``_request_ctx_stack``
里。

在flask中有三个对象比较常用

-  current_app
-  request
-  session

这三个对象，永远是指向\ ``LocalStack``
栈顶的上下文中对应的app、request或者session，对应的源码如下：

.. code:: python

   def _lookup_req_object(name):
       top = _request_ctx_stack.top
       if top is None:
           raise RuntimeError(_request_ctx_err_msg)
       return getattr(top, name)

   def _find_app():
       top = _app_ctx_stack.top
       if top is None:
           raise RuntimeError(_app_ctx_err_msg)
       return top.app
       
   _request_ctx_stack = LocalStack()
   _app_ctx_stack = LocalStack()
   current_app = LocalProxy(_find_app)
   request = LocalProxy(partial(_lookup_req_object, 'request'))
   session = LocalProxy(partial(_lookup_req_object, 'session'))

3.5.3 LocalProxy
----------------

通过上面的代码，你可以发现，我们访问LocalStack里的元素的时候，都是通过\ ``LocalProxy``
来进行的有没有？

这就很奇怪了，为什么不直接访问\ ``Local`` 和 ``LocalStack``\ 呢？

这应该是个难点，我这边举个例子，也许你就明白了。

首先是不使用LocalProxy的情况

.. code:: python

   # use Local object directly
   from werkzeug.local import LocalStack
   user_stack = LocalStack()
   user_stack.push({'name': 'Bob'})
   user_stack.push({'name': 'John'})

   def get_user():
       # do something to get User object and return it
       return user_stack.pop()


   # 直接调用函数获取user对象
   user = get_user()
   print user['name']
   print user['name']

输出结果是

::

   John
   John

使用LocalProxy后

.. code:: python

   # use LocalProxy
   from werkzeug.local import LocalStack, LocalProxy
   user_stack = LocalStack()
   user_stack.push({'name': 'Bob'})
   user_stack.push({'name': 'John'})

   def get_user():
       # do something to get User object and return it
       return user_stack.pop()

   # 通过LocalProxy使用user对象
   user = LocalProxy(get_user)
   print user['name']
   print user['name']

输出结果

::

   John
   Bob

怎么样，看出区别了吧，直接使用LocalStack对象，user一旦赋值就无法再动态更新了，而使用Proxy，每次调用操作符(这里\ ``[]操作符``\ 用于获取属性)，都会重新获取user，从而实现了动态更新user的效果。

每次 ``user['name']`` 的时候 就会触发 ``LocalProxy`` 类的
``__getitem__``\ ，从而调用该类的 ``_get_current_object``\ 。而每次
``_get_current_object``\ 都会返回
``get_user()``\ （在flask中对应的函数是 ``_lookup_req_object`` ）
的执行结果， 也就是 ``user_stack.pop()``

.. code:: python

   def __init__(self, local, name=None):
       # 【重要】将local对象（也就是一个get_user函数对象）赋值给self.__local
       object.__setattr__(self, '_LocalProxy__local', local)
       object.__setattr__(self, '__name__', name)
       if callable(local) and not hasattr(local, '__release_local__'):
           # "local" is a callable that is not an instance of Local or
           # LocalManager: mark it as a wrapped function.
           object.__setattr__(self, '__wrapped__', local)

   def _get_current_object(self):
       """Return the current object.  This is useful if you want the real
       object behind the proxy at a time for performance reasons or because
       you want to pass the object into a different context.
       """
       if not hasattr(self.__local, '__release_local__'):
           # 【重要】执行传递进行的 get_user 对象。
           return self.__local()
       try:
           return getattr(self.__local, self.__name__)
       except AttributeError:
           raise RuntimeError('no object bound to %s' % self.__name__)

这样就能实现每次对栈顶元素的操作，都是面对最新元素执行的。

3.5.4 经典错误
--------------

在 Flask 中经常会遇到的一个错误是：

   Working outside of application context.

这个错误，如果没有理解 flask
的上下文机制，是很难理解的。通过上面知识背景的铺垫，我们可以尝试来搞懂一下为什么会出现这样的情况。

首先我们先来模拟一下这个错误的产生。假设现在有一个单独的文件，内容如下

.. code:: python

   from flask import current_app

   app = Flask(__name__)

   app = current_app
   print(app.config['DEBUG'])

运行一下，会报如下错误。

.. code:: python

   Traceback (most recent call last):
     File "/Users/MING/PycharmProjects/fisher/app/mytest/mytest.py", line 19, in <module>
       print(app.config['DEBUG'])
     File "/Users/MING/.virtualenvs/fisher-gSdA58aK/lib/python3.6/site-packages/werkzeug/local.py", line 347, in __getattr__
       return getattr(self._get_current_object(), name)
     File "/Users/MING/.virtualenvs/fisher-gSdA58aK/lib/python3.6/site-packages/werkzeug/local.py", line 306, in _get_current_object
       return self.__local()
     File "/Users/MING/.virtualenvs/fisher-gSdA58aK/lib/python3.6/site-packages/flask/globals.py", line 51, in _find_app
       raise RuntimeError(_app_ctx_err_msg)
   RuntimeError: Working outside of application context.

你一定会奇怪吧。我明明也实例化一个app对象，但是为什么取current_app会报错呢？而如果不用current_app，就不会报错。

如果你认真学习了上面的内容，这边也就不难理解了。

从先前的研究发现，当使用\ ``current_app``\ 时，它取的是\ ``LocalStack``\ 的栈顶元素（app的上下文信息），而实际上在我们通过\ ``app = Flask(__name__)``\ 实例化一个app对象时，此时还没有将这个上下文信息写入\ ``LocalProxy``\ ，自然取栈顶元素就会出错了。

.. code:: python

   def _find_app():
       top = _app_ctx_stack.top
       if top is None:
           raise RuntimeError(_app_ctx_err_msg)
       return top.app

上面我们也说过了，这个上下文什么时候push进去呢？在外部发起一起request请求后，首先就会先检查
app 的上下文信息是否已经 push 进去了，如果没有的话，就会先半其push进去。

而上面我们是以运行单个文件的方式，并没有实际产生一个 request 请求，自然
在 ``LocalStack`` 里没有 app的上下文信息。报错也是正常的。

知道了错误根源后，如何解决这种问题呢？

在Flask中，它提供了一个方法\ ``ctx=app.app_context()``\ 可以获取一个上下文对象，我们只要将这个上下文对象
手动 push 到 ``LocalStack`` 中，\ ``current_app``
也就可以正常取到我们的app对象了。

.. code:: python

   from flask import Flask, current_app

   app = Flask(__name__)
   ctx = app.app_context()
   ctx.push()

   app = current_app
   print(app.config['DEBUG'])
   ctx.pop()

由于 AppContext 类实现了上下文协议

.. code:: python

   class AppContext(object):
       def __enter__(self):
           self.push()
           return self

       def __exit__(self, exc_type, exc_value, tb):
           self.pop(exc_value)

           if BROKEN_PYPY_CTXMGR_EXIT and exc_type is not None:
               reraise(exc_type, exc_value, tb)

所以你也可以这样写

.. code:: python

   from flask import Flask, current_app

   app = Flask(__name__)

   with app.app_context():
       app = current_app
       print(app.config['DEBUG'])

以上，是我通过学习七月的 ``Flask高级编程``
加上自己直白的理解，希望对你在理解 Flask的上下文核心机制 会有帮助。

--------------

.. figure:: https://ws1.sinaimg.cn/large/8f640247gy1fyi60fxos4j20u00a8tdz.jpg
   :alt: 关注公众号，获取最新干货！

