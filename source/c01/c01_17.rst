1.17 扑朔迷离的「描述符」
=========================

学习 Python 这么久了，说起 Python 的优雅之处，能让我脱口而出的，
Descriptor（描述符）特性可以排得上号。

描述符 是Python
语言独有的特性，它不仅在应用层使用，在语言的基础设施中也有涉及。

我可以大胆地猜测，你对于描述符的了解是始于诸如 Django ORM 和 SQLAlchemy
中的字段对象，是的，它们都是描述符。你的它的认识，可能也止步于此，如果你没有去深究，它为何要如此设计？也就加体会不到
Python 给我们带来的便利与优雅。

由于 描述符的内容较多，长篇大论，容易让你倦怠，所以我打算分几篇来讲。

1.17.1 为什么要使用描述符？
---------------------------

假想你正在给学校写一个成绩管理系统，并没有太多编码经验的你，可能会这样子写。

.. code:: python

   class Student:
       def __init__(self, name, math, chinese, english):
           self.name = name
           self.math = math
           self.chinese = chinese
           self.english = english

       def __repr__(self):
           return "<Student: {}, math:{}, chinese: {}, english:{}>".format(
                   self.name, self.math, self.chinese, self.english
               )

看起来一切都很合理

.. code:: python

   >>> std1 = Student('小明', 76, 87, 68)
   >>> std1
   <Student: 小明, math:76, chinese: 87, english:68>

但是程序并不像人那么智能，不会自动根据使用场景判断数据的合法性，如果老师在录入成绩的时候，不小心录入了将成绩录成了负数，或者超过100，程序是无法感知的。

聪明的你，马上在代码中加入了判断逻辑。

.. code:: python

   class Student:
       def __init__(self, name, math, chinese, english):
           self.name = name
           if 0 <= math <= 100:
               self.math = math
           else:
               raise ValueError("Valid value must be in [0, 100]")
           
           if 0 <= chinese <= 100:
               self.chinese = chinese
           else:
               raise ValueError("Valid value must be in [0, 100]")
         
           if 0 <= chinese <= 100:
               self.english = english
           else:
               raise ValueError("Valid value must be in [0, 100]")
           

       def __repr__(self):
           return "<Student: {}, math:{}, chinese: {}, english:{}>".format(
                   self.name, self.math, self.chinese, self.english
               )

这下程序稍微有点人工智能了，能够自己明辨是非了。

|image0|

程序是智能了，但在\ ``__init__``\ 里有太多的判断逻辑，很影响代码的可读性。巧的是，你刚好学过
Property
特性，可以很好的应用在这里。于是你将代码修改成如下，代码的可读性瞬间提升了不少

.. code:: python

   class Student:
       def __init__(self, name, math, chinese, english):
           self.name = name
           self.math = math
           self.chinese = chinese
           self.english = english

       @property
       def math(self):
           return self._math

       @math.setter
       def math(self, value):
           if 0 <= value <= 100:
               self._math = value
           else:
               raise ValueError("Valid value must be in [0, 100]")

       @property
       def chinese(self):
           return self._chinese

       @chinese.setter
       def chinese(self, value):
           if 0 <= value <= 100:
               self._chinese = value
           else:
               raise ValueError("Valid value must be in [0, 100]")

       @property
       def english(self):
           return self._english

       @english.setter
       def english(self, value):
           if 0 <= value <= 100:
               self._english = value
           else:
               raise ValueError("Valid value must be in [0, 100]")

       def __repr__(self):
           return "<Student: {}, math:{}, chinese: {}, english:{}>".format(
                   self.name, self.math, self.chinese, self.english
               )

程序还是一样的人工智能，非常好。

|image1|

你以为你写的代码，已经非常优秀，无懈可击了。

没想到，人外有天，你的主管看了你的代码后，深深地叹了口气：类里的三个属性，math、chinese、english，都使用了
Property
对属性的合法性进行了有效控制。功能上，没有问题，但就是太啰嗦了，三个变量的合法性逻辑都是一样的，只要大于0，小于100
就可以，代码重复率太高了，这里三个成绩还好，但假设还有地理、生物、历史、化学等十几门的成绩呢，这代码简直没法忍。去了解一下
Python 的描述符吧。

经过主管的指点，你知道了「描述符」这个东西。怀着一颗敬畏之心，你去搜索了下关于
描述符的用法。

其实也很简单，一个实现了 ``描述符协议`` 的类就是一个描述符。

什么描述符协议：实现了
``__get__()``\ 、\ ``__set__()``\ 、\ ``__delete__()``
其中至少一个方法的类，就是一个描述符。

-  ``__get__``\ ：
   用于访问属性。它返回属性的值，若属性不存在、不合法等都可以抛出对应的异常。
-  ``__set__``\ ：将在属性分配操作中调用。不会返回任何内容。
-  ``__delete__``\ ：控制删除操作。不会返回内容。

对描述符有了大概的了解后，你开始重写上面的方法。

如前所述，Score 类是一个描述器，当从 Student 的实例访问
math、chinese、english这三个属性的时候，都会经过 Score
类里的三个特殊的方法。这里的 Score 避免了 使用Property
出现大量的代码无法复用的尴尬。

.. code:: python

   class Score:
       def __init__(self, default=0):
           self._score = default

       def __set__(self, instance, value):
           if not isinstance(value, int):
               raise TypeError('Score must be integer')
           if not 0 <= value <= 100:
               raise ValueError('Valid value must be in [0, 100]')

           self._score = value

       def __get__(self, instance, owner):
           return self._score

       def __delete__(self):
           del self._score
           
   class Student:
       math = Score(0)
       chinese = Score(0)
       english = Score(0)

       def __init__(self, name, math, chinese, english):
           self.name = name
           self.math = math
           self.chinese = chinese
           self.english = english


       def __repr__(self):
           return "<Student: {}, math:{}, chinese: {}, english:{}>".format(
                   self.name, self.math, self.chinese, self.english
               )

实现的效果和前面的一样，可以对数据的合法性进行有效控制（字段类型、数值区间等）

|image2|

以上，我举了下具体的实例，从最原始的编码风格到 Property
，最后引出描述符。由浅入深，一步一步带你感受到描述符的优雅之处。

通过此文，你需要记住的只有一点，就是描述符给我们带来的编码上的便利，它在实现
``保护属性不受修改``\ 、\ ``属性类型检查``
的基本功能，同时有大大提高代码的复用率。

--------------

描述符注意事项
--------------

描述符的创建只能放在类的层级上，否则所有实例都将共享相同的属性值。

.. code:: python

   class Score:
       def __init__(self, default=0):
           self._value = default

       def __get__(self, instance, owner):
           return self._value

       def __set__(self, instance, value):
           print(value)
           if 0 <= value <= 100:
               self._value = value
           else:
               raise ValueError


   class Student:
       math = Score(0)
       chinese = Score(0)

       def __init__(self, math, chinese, english):
           self.math = math
           self.chinese = chinese
           Student.english = Score(english)

       def __repr__(self):
           return "<Student math:{}, chinese:{}, english:{}>".format(self.math, self.chinese, self.english)

看一下结果

.. code:: python

   >> std1 = Student(80,80,100)
   >>> std1
   <Student math:80, chinese:80, english:100>
   >>> std2 = Student(80,80,0)
   >>> std1
   <Student math:80, chinese:80, english:0>

或者

.. code:: python

   class Score:
       def __init__(self, default=0):
           self._value = default

       def __get__(self, instance, owner):
           return self._value

       def __set__(self, instance, value):
           if 0 <= value <= 100:
               self._value = value
           else:
               raise ValueError


   class Student:
       math = Score(0)
       chinese = Score(0)
       english = Score(0)

       def __repr__(self):
           return "<Student math:{}, chinese:{}, english:{}>".format(self.math, self.chinese, self.english)

看一下

.. code:: python

   >>> std1 = Student()
   >>> std1
   <Student math:0, chinese:0, english:0>
   >>> std1.math = 85
   >>> std1
   <Student math:85, chinese:0, english:0>
   >>> std2 = Student()
   >>> std2 # std2 居然共享了std1 的属性值
   <Student math:85, chinese:0, english:0>
   >>> std2.math = 100
   >>> std1 # std2 也会改变std1 的属性值
   <Student math:100, chinese:0, english:0>

以上例子说明，所有实例的属性是共享的，这是不合理的。

正当的做法应该是，所有的实例数据只属于该实例本身（通过实例初始化传入）。而需要所有实例共享的数据，不能通过实例化指定。

https://python3-cookbook.readthedocs.io/zh_CN/latest/c09/p09_define_decorators_as_classes.html

http://python-online.cn/zh_CN/latest/c03/c03_01.html

https://blog.csdn.net/BF02jgtRS00XKtCx/article/details/82882622

.. |image0| image:: http://image.python-online.cn/20190425221322.png
.. |image1| image:: http://image.python-online.cn/20190425221322.png
.. |image2| image:: http://image.python-online.cn/20190425221233.png

