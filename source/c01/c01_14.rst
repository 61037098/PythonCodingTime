<<<<<<< HEAD # 1.14 提升Python性能的7个习惯

--------------

   转载自：https://zhuanlan.zhihu.com/p/38160586

1.14.1 使用局部变量
-------------------

尽量使用局部变量代替全局变量：便于维护，提高性能并节省内存。

使用局部变量替换模块名字空间中的变量，例如 ls =
os.linesep。一方面可以提高程序性能，局部变量查找速度更快；另一方面可用简短标识符替代冗长的模块变量，提高可读性。

1.14.2 减少函数调用次数
-----------------------

对象类型判断时，采用isinstance()最优，采用对象类型身份（id()）次之，采用对象值（type()）比较最次。

::

   #判断变量num是否为整数类型type(num) == type(0) #调用三次函数type(num) is type(0) #身份比较isinstance(num,(int)) #调用一次函数

不要在重复操作的内容作为参数放到循环条件中，避免重复运算。

::

   #每次循环都需要重新执行len(a)while i < len(a):    statement#len(a)仅执行一次m = len(a)while i < m:    statement

如需使用模块X中的某个函数或对象Y，应直接使用from X import
Y，而不是import X;
X.Y。这样在使用Y时，可以减少一次查询（解释器不必首先查找到X模块，然后在X模块的字典中查找Y）。

1.14.3 采用映射替代条件查找
---------------------------

映射（比如dict等）的搜索速度远快于条件语句（如if等）。Python中也没有select-case语句。

::

   #if查找if a == 1:    b = 10elif a == 2:    b = 20...#dict查找，性能更优d = {1:10,2:20,...}b = d[a]

1.14.4 直接迭代序列元素
-----------------------

对序列（str、list、tuple等），直接迭代序列元素，比迭代元素的索引速度要更快。

::

   a = [1,2,3]#迭代元素for item in a:    print(item)#迭代索引for i in range(len(a)):   print(a[i])

1.14.5 采用生成器表达式替代列表解析
-----------------------------------

列表解析（list
comprehension），会产生整个列表，对大量数据的迭代会产生负面效应。

而生成器表达式则不会，其不会真正创建列表，而是返回一个生成器，在需要时产生一个值（延迟计算），对内存更加友好。

::

   #计算文件f的非空字符个数#生成器表达式l = sum([len(word) for line in f for word in line.split()])#列表解析l = sum(len(word) for line in f for word in line.split())

1.14.6 先编译后调用
-------------------

使用eval()、exec()函数执行代码时，最好调用代码对象（提前通过compile()函数编译成字节码），而不是直接调用str，可以避免多次执行重复编译过程，提高程序性能。

正则表达式模式匹配也类似，也最好先将正则表达式模式编译成regex对象（通过re.complie()函数），然后再执行比较和匹配。

1.14.7 模块编程习惯
-------------------

模块中的最高级别Python语句（没有缩进的代码）会在模块导入（import）时执行（不论其是否真的必要执行）。因此，应尽量将模块所有的功能代码放到函数中，包括主程序相关的功能代码也可放到main()函数中，主程序本身调用main()函数。

可以在模块的main()函数中书写测试代码。在主程序中，检测name的值，如果为’main’（表示模块是被直接执行），则调用main(）函数，进行测试；如果为模块名字（表示模块是被调用），则不进行测试。

======= # 1.14 with 与 上下文管理器

   提示：前面的内容较为基础，重点知识在后半段。

``with`` 这个关键字，对于每一学习Python的人，都不会陌生。

操作文本对象的时候，几乎所有的人都会让我们要用 ``with open``
，这就是一个上下文管理的例子。你一定已经相当熟悉了，我就不再废话了。

.. code:: python

   with open('test.txt') as f:
       print f.readlines()

1.14.1 what context manager？
-----------------------------

**基本语法**

.. code:: python

   with EXPR as VAR:
       BLOCK

先理清几个概念

::

   1. 上下文表达式：with open('test.txt') as f:
   2. 上下文管理器：open('test.txt')
   3. f 不是上下文管理器，应该是资源对象。

1.14.2 how context manager？
----------------------------

要自己实现这样一个上下文管理，要先知道上下文管理协议。

简单点说，就是在一个类里，实现了\ ``__enter__``\ 和\ ``__exit__``\ 的方法，这个类的实例就是一个上下文管理器。

例如这个示例：

.. code:: python

   class Resource():
       def __enter__(self):
           print('===connect to resource===')
           return self
       def __exit__(self, exc_type, exc_val, exc_tb):
           print('===close resource connection===')
           
       def operate(self):
           print('===in operation===')
           
   with Resource() as res:
       res.operate()

我们执行一下，通过日志的打印顺序。可以知道其执行过程。

::

   ===connect to resource===
   ===in operation===
   ===close resource connection===

从这个示例可以很明显的看出，在编写代码时，可以将资源的连接或者获取放在\ ``__enter__``\ 中，而将资源的关闭写在\ ``__exit__``
中。

1.14.3 why context manager？
----------------------------

学习时多问自己几个为什么，养成对一些细节的思考，有助于加深对知识点的理解。

为什么要使用上下文管理器？

在我看来，这和 Python 崇尚的优雅风格有关。

1. 可以以一种更加优雅的方式，操作（创建/获取/释放）资源，如文件操作、数据库连接；
2. 可以以一种更加优雅的方式，处理异常；

第一种，我们上面已经以资源的连接为例讲过了。

而第二种，会被大多数人所忽略。这里会重点讲一下。

大家都知道，处理异常，通常都是使用 ``try...execept..``
来捕获处理的。这样做一个不好的地方是，在代码的主逻辑里，会有大量的异常处理代理，这会很大的影响我们的可读性。

好一点的做法呢，可以使用 ``with`` 将异常的处理隐藏起来。

仍然是以上面的代码为例，我们将\ ``1/0``
这个\ ``一定会抛出异常的代码``\ 写在 ``operate`` 里

.. code:: python

   class Resource():
       def __enter__(self):
           print('===connect to resource===')
           return self

       def __exit__(self, exc_type, exc_val, exc_tb):
           print('===close resource connection===')
           return True

       def operate(self):
           1/0

   with Resource() as res:
       res.operate()

运行一下，惊奇地发现，居然不会报错。

这就是上下文管理协议的一个强大之处，异常可以在\ ``__exit__``
进行捕获并由你自己决定如何处理，是抛出呢还是在这里就解决了。在\ ``__exit__``
里返回 ``True``\ （没有return 就默认为 return False），就相当于告诉
Python解释器，这个异常我们已经捕获了，不需要再往外抛了。

在 写\ ``__exit__`` 函数时，需要注意的事，它必须要有这三个参数：

-  exc_type：异常类型
-  exc_val：异常值
-  exc_tb：异常的错误栈信息

当主逻辑代码没有报异常时，这三个参数将都为None。

1.14.4 how contextlib?
----------------------

在上面的例子中，我们只是为了构建一个上下文管理器，却写了一个类。如果只是要实现一个简单的功能，写一个类未免有点过于繁杂。这时候，我们就想，如果只写一个函数就可以实现上下文管理器就好了。

这个点Python早就想到了。它给我们提供了一个装饰器，你只要按照它的代码协议来实现函数内容，就可以将这个函数对象变成一个上下文管理器。

我们按照 contextlib 的协议来自己实现一个打开文件（with
open）的上下文管理器。

.. code:: python

   import contextlib

   @contextlib.contextmanager
   def open_func(file_name):
       # __enter__方法
       print('open file:', file_name, 'in __enter__')
       file_handler = open(file_name, 'r')
       
       # 【重点】：yield
       yield file_handler

       # __exit__方法
       print('close file:', file_name, 'in __exit__')
       file_handler.close()
       return

   with open_func('/Users/MING/mytest.txt') as file_in:
       for line in file_in:
           print(line)

在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于\ ``__enter__``\ 里的内容。yield
之后的代码，就相当于\ ``__exit__`` 里的内容。

上面这段代码只能实现上下文管理器的第一个目的（管理资源），并不能实现第二个目的（处理异常）。

如果要处理异常，可以改成下面这个样子。

.. code:: python

   import contextlib

   @contextlib.contextmanager
   def open_func(file_name):
       # __enter__方法
       print('open file:', file_name, 'in __enter__')
       file_handler = open(file_name, 'r')

       try:
           yield file_handler
       except Exception as exc:
           # deal with exception
           print('the exception was thrown')
       finally:
           print('close file:', file_name, 'in __exit__')
           file_handler.close()

           return

   with open_func('/Users/MING/mytest.txt') as file_in:
       for line in file_in:
           1/0
           print(line)

好像只要讲到上下文管理器，大多数人都会谈到打开文件这个经典的例子。

但是在实际开发中，可以使用到上下文管理器的例子也不少。我这边举个我自己的例子。

在OpenStack中，给一个虚拟机创建快照时，需要先创建一个临时文件夹，来存放这个本地快照镜像，等到本地快照镜像创建完成后，再将这个镜像上传到Glance。然后删除这个临时目录。

这段代码的主逻辑是\ ``创建快照``\ ，而\ ``创建临时目录``\ ，属于前置条件，\ ``删除临时目录``\ ，是收尾工作。

虽然代码量很少，逻辑也不复杂，但是“``创建临时目录，使用完后再删除临时目录``”这个功能，在一个项目中很多地方都需要用到，如果可以将这段逻辑处理写成一个工具函数作为一个上下文管理器，那代码的复用率也大大提高。

代码是这样的

|image0|

总结起来，使用上下文管理器有三个好处：

1. 提高代码的复用率；
2. 提高代码的优雅度；
3. 提高代码的可读性； >>>>>>> ac2277bbccb12e9483bc24cdd953985053efe96e

--------------

.. figure:: https://ws1.sinaimg.cn/large/8f640247gy1fyi60fxos4j20u00a8tdz.jpg
   :alt: 关注公众号，获取最新干货！


.. |image0| image:: http://image.python-online.cn/20190310172800.png

