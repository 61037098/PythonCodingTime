8.5 OpenStack 源码剖析
======================

8.5.1 虚拟机是如何创建出来的？
------------------------------

8.5.2 rpc 是如何调用的？
------------------------

8.5.3 创建快照代码解读？
------------------------

8.5.4 虚拟机状态
----------------

vm_state 描述虚拟机当前的稳定状态，其值可以在
``nova/compute/vm_states.py``\ 看到

::

   ACTIVE
   BUILDING
   PAUSED
   SUSPENDED
   STOPPED
   RESCUED
   RESIZED
   SOFT_DELETED
   DELETED
   ERROR
   SHELVED

power_state
描述的是从hypervisor传过来的状态，其值可在\ ``nova/compute/power_state.py``

::

   NOSTATE
   RUNNING
   PAUSED
   SHUTDOWN
   CRASHED
   SUSPENDED

task_state 描述的是中间任务状态，

::

   spawning
   networking
   scheduling
   block_device_mapping

在创建虚拟机时，会有几次会产生虚拟机状态（vm_state和task_state）的上报（到ceilomet
er）。

nova
提供了一个配置项：notify_on_state_change，本意是想，如果配置\ ``vm_state``\ 就只在vm_state

第一次，在\ ``manager.py:2050``\ 的函数
``_do_build_and_run_instance``\ 里，看instance.save()大

8.5.5 快照镜像如何实现？
------------------------

入口函数在：\ ``nova/virt/libvirt/driver.py:snapshot()``

会先获取imagebackend的类型，然后找到对应的backend

.. code:: python

   disk_path, source_format = libvirt_utils.find_disk(virt_dom)
   source_type = libvirt_utils.get_disk_type_from_path(disk_path)
   ...
   snapshot_backend = self.image_backend.snapshot(instance,
                                                  disk_path,
                                                  image_type=source_type)

接下来，会调用对应的imagebackend的\ ``snapshot_extract`` 方法。

|image0|

``snapshot_extract``
方法最终会调用\ ``nova/virt/images.py:_convert_image()``
，可以看出其实底层调用的是 ``qemu-img`` 提供的\ ``convert`` 接口。

|image1|

如果是qcow2的backend，不是调用这边，而是调用
``nova/virt/libvirt/utils.py:extract_snapshot()``

.. figure:: C:\Users\wangbm\AppData\Roaming\Typora\typora-user-images\1551944122412.png
   :alt: 1551944122412

   1551944122412

如果要查询镜像压缩的时间，可以在compute上执行这个命令

::

   grep -E "Start executing commands|End executing commands" /var/log/nova/nova-compute.log

以上，就是整个镜像创建的过程。

独立磁盘模式的暂时不支持，原因分析如下。

在\ ``libvirt_utils.get_disk_type_from_path``
里没有相应的修改，导致返回的是lvm。

|image2|

后面的imagebackend也相应的变成 lvm的

|image3|

然后会进入 lvm这个backend的init函数。由于\ ``path`` 是\ ``/dev/sdb``
并不是一个lv，所以这边会报错。

.. figure:: C:\Users\wangbm\AppData\Roaming\Typora\typora-user-images\1551940635806.png
   :alt: 1551940635806

   1551940635806

下次修改方法：一个是最开始获取\ ``source_type``\ 时判断为isolate，一个是后面
``isolate``\ 的\ ``extract_snapshot`` 也要和lvm一样实现一下。

8.5.6 宿主机资源采集上报
------------------------

compute的资源上报，是在
``nova/compute/resource_tracker.py:_init_compute_node`` 里。

从宿主机上获取数据：\ ``update_available_resource`` 函数下的
``resources = self.driver.get_available_resource(self.nodename)``
其调用的函数是\ ``virt/libvirt/driver.py`` 里的
``get_available_resource`` 函数

|image4|

从数据库获取旧数据
``self.compute_node = self._get_compute_node(context)``

8.5.7 资源主机调度实现
----------------------

一般情况下一个 OpenStack
中，会部署有许多个计算节点。当我们创建一个虚拟机时，OpenStack
如何决定要将我们的虚拟机创建在哪里呢？这就是 openstack-nova-scheduler
要做的事，顾名思义，它是对集群内的所有计算节点的资源情况进行比较，从而选出一台最适合我们当前虚拟机创建的节点，再把请求发到
这一台节点上的 openstack-nova-compute 去进行真正的创建过程。

从源代码中看，最开始是 nova-conductor （nova/conductor/manager.py）在给
nova-compute 发创建请求前，会先让 nova-scheduler
选出一台资源充足的计算节点。

|image5|

nova-scheduler 的调度主要由两部分组成

|image6|

-  过滤器：filter，将不满足条件（硬性条件，比如内存，cpu，磁盘，pci设备等）的计算节点，直接过滤掉。意义：从过滤器出来的那些计算节点，理论上都可以创建虚拟机。
-  称重器：weigher，对满足硬性条件的众多主机按照一定的规则进行权重配比。意义：经过称重器计算，选出你更希望在哪台节点上创建虚拟机。

不管是过滤器，还是称重器，它们都需要两个参数

-  hosts：多个 host_state
   的集合，包含有当前可用的计算节点信息（资源，ip等）。其中单个元素是
   HostState
   （nova/scheduler/host_manager.py）类的实例。如果你想添加其他原来没有的信息，比如
   compute 的 id，可以在 ``_update_from_compute_node``
   函数中添加。它会从compute_nodes 表中取得你想要的信息。

   |image7|

-  spec_obj：你所要请求创建的虚拟机信息（模板，镜像等）。它是从
   objects.RequestSpec.from_primitives 中取得的

   |image8|

过滤器，它的代码如下：

|image9|

称重器，它的规则主要看这段代码。

|image10|

我在代码中，加了几段日志。从左到右，三个不同颜色的内容分别为，原始权值，配重系数（越高说明越占比越大，越影响最终结果），经过
nomalize 后的权值（只有 0 和 1，我觉得原代码这块应该要有浮点数）。

|image11|

那最终的权值如何计算呢？

1. 先计算每一个称重器后的权重： weights \* multipier
2. 最后按不同的compute 将权重相加起来。

8.5.8 手动引入上下文环境
------------------------

有两种方式可以生成context

1. 如果有请求req（在nova-api里），可以使用这种

|image12|

2. 其他地方可以使用这种

|image13|

.. |image0| image:: http://image.python-online.cn/FhRPy4B1xEI9SfoD2RcunJl15ZE3
.. |image1| image:: http://image.python-online.cn/FuyMWZS6HF4g3rPwTlLcereZxg4L
.. |image2| image:: http://image.python-online.cn/FnJA8RNIvJN2lAEXbKtJDpOLg1vg
.. |image3| image:: http://image.python-online.cn/FnGyI8jCQFLCGi0pGVmI3SV6pDrv
.. |image4| image:: http://image.python-online.cn/FrbE6oEZ3vtTWwDfMNQ16MGi6SWr
.. |image5| image:: http://image.python-online.cn/20190424212211.png
.. |image6| image:: http://image.python-online.cn/20190424213430.png
.. |image7| image:: http://image.python-online.cn/20190424214653.png
.. |image8| image:: http://image.python-online.cn/20190424214540.png
.. |image9| image:: http://image.python-online.cn/20190424221602.png
.. |image10| image:: http://image.python-online.cn/20190424215735.png
.. |image11| image:: http://image.python-online.cn/20190424220008.png
.. |image12| image:: http://image.python-online.cn/20190426153322.png
.. |image13| image:: http://image.python-online.cn/20190426152148.png

