4.21 Python-pip 使用详解
========================

所有的 Python 开发者都清楚，Python
之所以如此受欢迎，正是由于语法简单，上手容易，能够以最快的速度开发出一个满足基本需要的项目。

能够在 众多高级语言中，脱颖而出，除了 Python
语言本身的特色之外，更多还要归功于有很多很多的 Python 爱好者愿意以
Python
为基础封装出各种有利于开发的第三方工具包。拿来即用，不用重复造轮子。

Python
从1991年诞生到现在，已经过去28个年头了，这其间产生了数以万计的第三方包，且每个包都会不断更新，会有越来越多的版本。

当你在一个复杂的项目环境中，如果没有一个有效的依赖包管理方案，项目的维护将会是一个大问题。

pip 是官方推荐的包管理工具，在大多数开发者眼里，pip 几乎是 python
的标配。

当然也有其他的包管理工具

-  distutils：仅用于打包和安装，严格来讲不算是包管理工具

-  setuptools：
   distutils的增强版，扩展了distutils，提供更多的功能，引入包依赖的管理，easy_install就是它的一个命令行工具，引入了
   egg 的文件格式。

   \```sh e llsh el # 从 pypi 上下载安装 easy_install pkg

   .. rubric:: 从本地的 tgz 文件中安装
      :name: 从本地的-tgz-文件中安装

   easy_install pkg.tgz

   .. rubric:: 从本地的 egg 文件中安装
      :name: 从本地的-egg-文件中安装

   easy_install pkg.egg \``\`

-  Pipenv：一个集依赖包管理（pip）及虚拟环境管理（virtualenv）的工具

-  可能还有其他的，这里就不列了。

1. 查询软件包
-------------

查询当前环境安装的所有软件包

.. code:: shell

   $ pip list

查询 pypi 上含有某名字的包

.. code:: shell

   $ pip search pkg

查询当前环境中可升级的包

.. code:: shell

   $ pip list --outdated

查询一个包的详细内容

.. code:: shell

   $ pip show pkg

2. 下载软件包
-------------

在不安装软件包的情况下下载软件包到本地

.. code:: shell

   $ pip download --destination-directory /local/wheels -r requirements.txt

下载完，总归是要安装的，可以指定这个目录中安装软件包，而不从 pypi
上安装。

.. code:: shell

   $ pip install --no-index --find-links=/local/wheels -r requirements.txt

当然你也从你下载的包中，自己构建生成 wheel 文件

.. code:: shell

   $ pip install wheel
   $ pip wheel --wheel-dir=/local/wheels -r requirements.txt

3. 安装软件包
-------------

使用 ``pip install <pkg>`` 可以很方便地从 pypi 上搜索下载并安装 python
包。

如下所示

.. code:: shell

   $ pip install requests

这是安装包的基本格式，我们也可以为其添加更多参数来实现不同的效果。

**3.1 只从本地安装，而不从 pypi 安装**

.. code:: shell

   # 前提你得保证你已经下载 pkg 包到 /local/wheels 目录下
   $ pip install --no-index --find-links=/local/wheels pkg

**3.2 限定版本进行软件包安装**

以下三种，对单个 python 包的版本进行了约束

.. code:: shell

   # 所安装的包的版本为 2.1.2
   $ pip install pkg==2.1.2

   # 所安装的包必须大于等于 2.1.2
   $ pip install pkg>=2.1.2

   # 所安装的包必须小于等于 2.1.2
   $ pip install pkg<=2.1.2

以下命令用于管理/控制整个 python 环境的包版本

.. code:: shell

   # 导出依赖包列表
   pip freeze >requirements.txt

   # 从依赖包列表中安装
   pip install -r requirements.txt

   # 确保当前环境软件包的版本(并不确保安装)
   pip install -c constraints.txt

**3.3 限制不从 wheel 安装**

.. code:: shell

   $ pip install pkg --no-binary

**3.4 指定代理服务器安装**

当你身处在一个内网环境中时，无法直接连接公网。这时候你使用\ ``pip install``
安装包，就会失败。

面对这种情况，可以有两种方法：

1. 下载离线包拷贝到内网机器中安装
2. 使用代理服务器转发请求

第一种方法，虽说可行，但有相当多的弊端

-  步骤繁杂，耗时耗力
-  无法处理包的依赖问题

这里重点来介绍，第二种方法：

.. code:: shell

   $ pip install --proxy [user:passwd@]http_server_ip:port pkg

每次安装包就发输入长长的参数，未免有些麻烦，为此你可以将其写入配置文件中：\ ``$HOME/.config/pip/pip.conf``

对于这个路径，说明几点

-  不同的操作系统，路径各不相同

.. code:: shell

   # Linux/Unix:
   /etc/pip.conf
   ~/.pip/pip.conf
   ~/.config/pip/pip.conf
    
   # Mac OSX:
   ~/Library/Application Support/pip/pip.conf
   ~/.pip/pip.conf
   /Library/Application Support/pip/pip.conf
    
   # Windows:
   %APPDATA%\pip\pip.ini
   %HOME%\pip\pip.ini
   C:\Documents and Settings\All Users\Application Data\PyPA\pip\pip.conf (Windows XP)
   C:\ProgramData\PyPA\pip\pip.conf (Windows 7及以后) 

-  若在你的机子上没有此文件，则自行创建即可

如何配置，这边给个样例：

.. code:: ini

   [global]
   index-url = http://mirrors.aliyun.com/pypi/simple/ 

   # 替换出自己的代理地址，格式为[user:passwd@]proxy.server:port
   proxy=http://xxx.xxx.xxx.xxx:8080 

   [install]
   # 信任阿里云的镜像源，否则会有警告
   trusted-host=mirrors.aliyun.com 

**3.5 安装用户私有软件包**

很多人可能还不清楚，python 的安装包是可以有用户隔离的。

如果你拥有管理员权限，你可以将包安装在全局环境中。在全局环境中的这个包可被该机器上的所有用户使用（没有被用户层级的包覆盖的情况下）。

当你的用户没有管理员的权限，你使用 ``pip install <pkg>``
会提示权限不足，安装失败。

这可怎么办呢？你的项目中，需要安装这个第三方包。

面对这种情况，我能想到的有两种方法：

1. 建立一个虚拟环境
2. 将包安装在用户层级的环境中

虚拟环境，之前写过几篇文章，这里不再展开讲。

今天的重点是第二种方法，教你如何安装用户私有的包？

命令也很简单，只要加上 ``--user`` 参数，pip 就会将其安装在当前用户的
``~/.local/lib/python3.x/site-packages`` 下，而其他用户的 python
则不会受影响。

.. code:: shell

   pip install --user pkg

那么他是如何实现这个优先级顺序呢？答案是，sys.path

4. 卸载软件包
-------------

就一条命令，不再赘述

.. code:: shell

   $ pip uninstall pkg

5. 升级软件包
-------------

想要对现有的 python 进行升级，其本质上也是先从 pypi
上下载最新版本的包，再对其进行安装。所以升级也是使用
``pip install``\ ，只不过要加一个参数 ``--upgrade``\ 。

::

   $ pip install --upgrade pkg

在升级的时候，其实还有一个不怎么用到的选项
``--upgrade-strategy``\ ，它是用来指定升级策略。

它的可选项只有两个：

-  ``eager`` ：升级全部依赖包
-  ``only-if-need``\ ：只有当旧版本不能适配新的父依赖包时，才会升级。

在 pip 10.0 版本之后，这个选项的默认值是
``only-if-need``\ ，因此如下两种写法是一互致的。

.. code:: shell

   pip install --upgrade pkg1 
   pip install --upgrade pkg1 --upgrade-strategy only-if-need

以上几乎包含了 pip
的所有常用使用场景，为了方便，我将其整理成一张表格，在公众号后台回复“pip”，可获取高清无水印图片。

|image0|

.. |image0| image:: http://image.python-online.cn/20191105200041.png

